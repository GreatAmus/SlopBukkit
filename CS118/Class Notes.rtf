{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\info
{\author Chris Miller}
{\*\company FSDEV}
{\*\copyright 2009}}\margl1440\margr1440\vieww16700\viewh12780\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 32-bit General-Purpose Registers:\
\

\b NAME
\b0  		
\b CONVENTIONAL USES
\b0 \
EAX 			(accumulator register)\
EBX 			(base of something, eg. an array)\
ECX 			(counter, eg. i)\
EDX			(data, rather arbitrary)\
EBP			(base pointer, eg. a pointer within an array or stack)\
ESP			(stack pointer)\
ESI			(source index, eg. for an array source location)\
EDI			(destination index, eg. for an array destination location)\
\
EFLAGS		(how you determine whether your instructions were successful)\
EIP			(instruction pointer)\
\
(e stands for extended; if you remove the e, it's the old name for the 16-bit registers)\
\

\b 32-bit
\b0 			
\b 16-bit
\b0 			
\b 8-bit high
\b0 		
\b 8-bit low
\b0 \
EAX				AX				AH			AL\
EBX				BX				BH			BL\
ECX				CX				CH			CL\
EDX				DX				DH			DL\
\

\b 32-bit
\b0 			
\b 16-bit
\b0 \
ESI				SI\
EDI				DI\
EBP				BP\
ESP				SP\
\
16-bit Segment Registers\
CS				(code segment)\
SS				(stack segment)\
DS				(data segment)\
ES				(arbitrary 16-bit segment)\
FS				(arbitrary 16-bit segment)\
GS				(arbitrary 16-bit segment)\
\
EFLAGS:\
Carry: unsigned arithmetic out of range\
Overflow: signed arithmetic out of range\
Sign: result is negative\
Zero: result is zero\
Auxiliary Carry: carry from bit 3 to bit 4\
Parity: sum of 1 bits is an even number\
\
Eight floating-point registers:\
ST(0)\
ST(1)\
ST(2)\
ST(3)\
ST(4)\
ST(5)\
ST(6)\
ST(7)\
\
Directives are executed by the assembler.  Instructions are executed by the CPU.  e.g.\
\
mov eax, 2*3 ; the CPU never sees 2*3, it's being computed by the assembler\
\
Identifiers are not case sensitive:\
o 1-247 characters including digits\
o not case sensitive\
o first character must be a letter, _, @, ?, or $\
\
Radix: the base for a numbering system.  Eg:\
h - hexadecimal\
d - decimal\
b - binary\
r - encoded real\
\
Register operands:\
o constant\
o constant expression\
o register\
o memory (data label)\
\
asm lines look like this:\
\
	label mnemonic operand(s) comment\
\
[eax] dereferences the register\
\
loop instruction uses ecx as the point to target and esi to point to source.  esi is incremented at each iteration.  For example:\
\
for(int i=n; i>0; i--) \{ \}\
\
mov esi, OFFSET source ; put the beginning of the source into ESI\
mov ecx, n 	; put the end of the loop into ECX\
L1:\
\
loop L1		; go to L1 if ESI is greater than 0, add one to ECX\
\
"Little-endian:" used by IA-32 and IA-64 chips.  Higher-order bits are stored towards the end of a memory field.\
"Big-endian:" used by some chips, such as SPARC.  Higher-order bits are stored towards the beginning of a memory field.}